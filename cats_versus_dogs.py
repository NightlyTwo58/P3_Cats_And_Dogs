# -*- coding: utf-8 -*-
"""Cats Versus Dogs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dkSMttm8CBNzMIpYjhflijin3X1oB4f4
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Rescaling, ZeroPadding2D, AveragePooling2D, BatchNormalization, LeakyReLU
import tensorflow_datasets as tfds
import os
from PIL import Image

URL = 'https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip'

print(tf.config.list_physical_devices('GPU'))

if not os.path.exists('/root/datasets'):
    os.makedirs('/root/datasets')
cvd_zipped = tf.keras.utils.get_file(origin=URL, fname='cvd_zipped', extract=True, cache_dir='/root/datasets')
print(cvd_zipped)

inputShape = (250, 250)

cvd_train = tf.keras.utils.image_dataset_from_directory(
                                                        directory='/root/datasets/datasets/cats_and_dogs_filtered/train',
                                                        labels='inferred',
                                                        label_mode='binary',
                                                        color_mode='rgb',
                                                        image_size=inputShape,
                                                        batch_size=10,
                                                        crop_to_aspect_ratio=True,
                                                        shuffle=True,
                                                        seed=44775
                                                        )

(cvd_test, cvd_val) = tf.keras.utils.image_dataset_from_directory(
                                                        directory='/root/datasets/datasets/cats_and_dogs_filtered/validation',
                                                        labels='inferred',
                                                        label_mode='binary',
                                                        color_mode='rgb',
                                                        image_size=inputShape,
                                                        batch_size=10,
                                                        crop_to_aspect_ratio=True,
                                                        shuffle=True,
                                                        validation_split=0.2,
                                                        subset='both',
                                                        seed=44775
                                                        )

"""
print(list(sample))
"""
print(cvd_train)

# learning_rate_func = tf.keras.optimizers.schedules.PiecewiseConstantDecay([], [])

model = tf.keras.Sequential()

model.add(tf.keras.layers.Input((250, 250, 3)))
model.add(tf.keras.layers.Rescaling(1./255))

# model.add(tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same'))

model.add(tf.keras.layers.Conv2D(32, 3, padding='same'))
model.add(tf.keras.layers.LeakyReLU())

model.add(tf.keras.layers.MaxPooling2D(3))

# model.add(tf.keras.layers.Conv2D(128, 3, activation='relu', padding='same'))

model.add(tf.keras.layers.Conv2D(64, 3, padding='same'))
model.add(tf.keras.layers.LeakyReLU())

model.add(tf.keras.layers.MaxPooling2D(3))

# model.add(tf.keras.layers.Conv2D(256, 3, activation='relu', padding='same'))
# model.add(tf.keras.layers.Conv2D(256, 3, activation='relu', padding='same'))

model.add(tf.keras.layers.Conv2D(128, 3, padding='same'))
model.add(tf.keras.layers.LeakyReLU())

model.add(tf.keras.layers.Conv2D(128, 3, padding='same'))
model.add(tf.keras.layers.LeakyReLU())


model.add(tf.keras.layers.MaxPooling2D(2))

model.add(tf.keras.layers.Conv2D(256, 3, padding='same'))
model.add(tf.keras.layers.LeakyReLU())

model.add(tf.keras.layers.MaxPooling2D(2))

model.add(tf.keras.layers.Conv2D(256, 3, padding='same'))
model.add(tf.keras.layers.LeakyReLU())




model.add(tf.keras.layers.MaxPooling2D(2))

model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(2048))
model.add(tf.keras.layers.LeakyReLU())
model.add(tf.keras.layers.Dropout(0.7))
model.add(tf.keras.layers.Dense(2048))
model.add(tf.keras.layers.LeakyReLU())
model.add(tf.keras.layers.Dropout(0.7))

model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

model.summary()
model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),
    loss=tf.keras.losses.BinaryCrossentropy(from_logits=False),
    metrics='accuracy'
    )

for layer in model.layers:
    print(layer, layer.trainable)
model.fit(x=cvd_train, epochs=10, batch_size=10, validation_data=cvd_val)

img_dir = "/content/drive/MyDrive/astronomy stuff/cat.jpg"

img = Image.open(img_dir)
plt.imshow(img)
img = img.resize((250, 250), resample=0)

prediction = model.predict(np.expand_dims(np.asarray(img), axis=0))
print("The AI thinks that it's a cat with a confidence of " + str(100*(1-prediction[0][0])) + "%.")